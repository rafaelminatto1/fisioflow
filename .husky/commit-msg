#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

# Commit message hook para FisioFlow
echo "üìù Validando mensagem de commit..."

# 1. Commitlint (padr√£o convencional) - com fallback para Windows
if command -v npx >/dev/null 2>&1; then
  npx --no-install commitlint --edit "$1"
elif command -v npm >/dev/null 2>&1; then
  npm exec commitlint --edit "$1"
else
  echo "‚ö†Ô∏è  npx/npm n√£o encontrado, pulando commitlint"
fi

# 2. Verifica√ß√µes adicionais
commit_regex='^(feat|fix|docs|style|refactor|test|chore|perf|ci|build|revert)(\(.+\))?: .{1,50}'

commit_message=$(cat "$1")

# Verificar se a mensagem segue o padr√£o
if ! echo "$commit_message" | grep -qE "$commit_regex"; then
  echo "‚ùå Mensagem de commit inv√°lida!"
  echo ""
  echo "üìã Formato esperado:"
  echo "   <tipo>[escopo opcional]: <descri√ß√£o>"
  echo ""
  echo "üè∑Ô∏è  Tipos v√°lidos:"
  echo "   feat:     Nova funcionalidade"
  echo "   fix:      Corre√ß√£o de bug"
  echo "   docs:     Documenta√ß√£o"
  echo "   style:    Formata√ß√£o, ponto e v√≠rgula, etc"
  echo "   refactor: Refatora√ß√£o de c√≥digo"
  echo "   test:     Adi√ß√£o ou corre√ß√£o de testes"
  echo "   chore:    Tarefas de manuten√ß√£o"
  echo "   perf:     Melhoria de performance"
  echo "   ci:       Mudan√ßas no CI/CD"
  echo "   build:    Mudan√ßas no sistema de build"
  echo "   revert:   Reverter commit anterior"
  echo ""
  echo "üìù Exemplos:"
  echo "   feat: adicionar autentica√ß√£o de usu√°rio"
  echo "   fix(auth): corrigir valida√ß√£o de token"
  echo "   docs: atualizar README com instru√ß√µes"
  echo ""
  exit 1
fi

# 3. Verificar tamanho da mensagem
if [ ${#commit_message} -gt 72 ]; then
  echo "‚ö†Ô∏è  Mensagem muito longa (${#commit_message} caracteres)"
  echo "üí° Mantenha a primeira linha com at√© 50 caracteres"
fi

# 4. Verificar se n√£o cont√©m TODO ou FIXME
if echo "$commit_message" | grep -qi "\(TODO\|FIXME\|XXX\)"; then
  echo "‚ö†Ô∏è  Mensagem cont√©m TODO/FIXME. Considere resolver antes do commit."
fi

echo "‚úÖ Mensagem de commit v√°lida!"