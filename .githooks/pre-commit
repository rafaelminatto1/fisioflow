#!/bin/sh
# Pre-commit hook para FisioFlow
# Executa verificações antes de cada commit

set -e

echo "🔍 Executando verificações pre-commit..."

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Função para imprimir com cor
print_color() {
    printf "${1}${2}${NC}\n"
}

# Verificar se há arquivos staged
if git diff --cached --quiet; then
    print_color $YELLOW "⚠️  Nenhum arquivo staged para commit"
    exit 1
fi

# Verificar se há arquivos grandes (>5MB)
print_color $BLUE "📏 Verificando tamanho dos arquivos..."
large_files=$(git diff --cached --name-only | xargs -I {} find {} -size +5M 2>/dev/null || true)
if [ ! -z "$large_files" ]; then
    print_color $RED "❌ Arquivos muito grandes encontrados (>5MB):"
    echo "$large_files"
    print_color $YELLOW "💡 Considere usar Git LFS para arquivos grandes"
    exit 1
fi

# Verificar se há secrets ou chaves
print_color $BLUE "🔒 Verificando secrets..."
secret_patterns=(
    "password\s*=\s*['\"][^'\"]+['\"]" 
    "api[_-]?key\s*=\s*['\"][^'\"]+['\"]" 
    "secret\s*=\s*['\"][^'\"]+['\"]" 
    "-----BEGIN.*PRIVATE.*KEY-----" 
    "sk_live_" 
    "pk_live_" 
    "AIza[0-9A-Za-z\\-_]{35}"
)

for pattern in "${secret_patterns[@]}"; do
    # Excluir arquivos de hook da verificação de secrets
    staged_content=$(git diff --cached --name-only | grep -v "\.githooks/" | xargs git diff --cached 2>/dev/null || true)
    if echo "$staged_content" | grep -iE "$pattern" >/dev/null 2>&1; then
        # Verificar se não é um caso legítimo (mock tokens ou enums)
        if ! echo "$staged_content" | grep -q "mock-token" && ! echo "$staged_content" | grep -q "SMS_TOKEN = 'sms_token'"; then
            print_color $RED "❌ Possível secret detectado no commit!"
            print_color $YELLOW "🔍 Padrão encontrado: $pattern"
            print_color $YELLOW "💡 Remova secrets antes de fazer commit"
            exit 1
        fi
    fi
done

# Verificar arquivos TypeScript/JavaScript
print_color $BLUE "🔧 Verificando arquivos TS/JS..."
ts_js_files=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(ts|tsx|js|jsx)$' || true)

if [ ! -z "$ts_js_files" ]; then
    # Verificar sintaxe básica
    for file in $ts_js_files; do
        if [ -f "$file" ]; then
            # Verificar se há console.log em produção
            if grep -n "console\.log" "$file" >/dev/null 2>&1; then
                print_color $YELLOW "⚠️  console.log encontrado em $file"
                print_color $YELLOW "💡 Considere remover antes do commit"
            fi
            
            # Verificar se há debugger (excluindo configurações legítimas)
            if grep -n "debugger" "$file" | grep -v "drop_debugger" >/dev/null 2>&1; then
                print_color $RED "❌ debugger encontrado em $file"
                print_color $YELLOW "💡 Remova debugger antes do commit"
                exit 1
            fi
            
            # Verificar se há TODO/FIXME
            if grep -n "TODO\|FIXME" "$file" >/dev/null 2>&1; then
                print_color $YELLOW "📝 TODO/FIXME encontrado em $file"
            fi
        fi
    done
    
    # Executar ESLint se disponível
    if command -v npx >/dev/null 2>&1 && [ -f "package.json" ]; then
        if npm list eslint >/dev/null 2>&1; then
            print_color $BLUE "🔍 Executando ESLint..."
            if ! npx eslint $ts_js_files --max-warnings 0; then
                print_color $RED "❌ ESLint falhou"
                print_color $YELLOW "💡 Corrija os erros de linting antes do commit"
                exit 1
            fi
        fi
    fi
fi

# Verificar arquivos de configuração
print_color $BLUE "⚙️  Verificando arquivos de configuração..."
config_files=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(json|yml|yaml|toml)$' || true)

if [ ! -z "$config_files" ]; then
    for file in $config_files; do
        if [ -f "$file" ]; then
            case "$file" in
                *.json)
                    if ! python -m json.tool "$file" >/dev/null 2>&1 && ! node -e "JSON.parse(require('fs').readFileSync('$file', 'utf8'))" >/dev/null 2>&1; then
                        print_color $RED "❌ JSON inválido em $file"
                        exit 1
                    fi
                    ;;
                *.yml|*.yaml)
                    if command -v yamllint >/dev/null 2>&1; then
                        if ! yamllint "$file" >/dev/null 2>&1; then
                            print_color $YELLOW "⚠️  Possível problema no YAML: $file"
                        fi
                    fi
                    ;;
            esac
        fi
    done
fi

# Verificar se há conflitos de merge não resolvidos
print_color $BLUE "🔀 Verificando conflitos de merge..."
if git diff --cached | grep -E '^(<{7}|={7}|>{7})' >/dev/null 2>&1; then
    print_color $RED "❌ Marcadores de conflito de merge encontrados!"
    print_color $YELLOW "💡 Resolva todos os conflitos antes do commit"
    exit 1
fi

# Verificar se há whitespace issues
print_color $BLUE "🧹 Verificando whitespace..."
if ! git diff --cached --check >/dev/null 2>&1; then
    print_color $YELLOW "⚠️  Problemas de whitespace encontrados"
    print_color $YELLOW "💡 Execute 'git diff --cached --check' para detalhes"
fi

# Verificar tamanho do commit
print_color $BLUE "📊 Verificando tamanho do commit..."
files_changed=$(git diff --cached --numstat | wc -l)
lines_added=$(git diff --cached --numstat | awk '{sum += $1} END {print sum+0}')
lines_deleted=$(git diff --cached --numstat | awk '{sum += $2} END {print sum+0}')

if [ "$files_changed" -gt 50 ]; then
    print_color $YELLOW "⚠️  Muitos arquivos alterados ($files_changed)"
    print_color $YELLOW "💡 Considere dividir em commits menores"
fi

if [ "$lines_added" -gt 1000 ]; then
    print_color $YELLOW "⚠️  Muitas linhas adicionadas ($lines_added)"
    print_color $YELLOW "💡 Considere dividir em commits menores"
fi

# Verificar se há package-lock.json e package.json juntos
if git diff --cached --name-only | grep -q "package.json" && git diff --cached --name-only | grep -q "package-lock.json"; then
    print_color $GREEN "✅ package.json e package-lock.json atualizados juntos"
elif git diff --cached --name-only | grep -q "package.json"; then
    print_color $YELLOW "⚠️  package.json alterado sem package-lock.json"
    print_color $YELLOW "💡 Execute 'npm install' para atualizar o lock file"
fi

print_color $GREEN "✅ Todas as verificações pre-commit passaram!"
print_color $BLUE "📝 Arquivos: $files_changed | Linhas: +$lines_added -$lines_deleted"

exit 0