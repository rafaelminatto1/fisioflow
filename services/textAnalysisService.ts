import { GoogleGenerativeAI } from '@google/generative-ai';

import type { Patient } from '../types';

import { aiCache } from './aiCache';

const getGeminiInstance = () => {
  const apiKey = import.meta.env.VITE_GEMINI_API_KEY || 
                process.env.VITE_GEMINI_API_KEY || 
                localStorage.getItem('GEMINI_API_KEY') || '';
  
  if (!apiKey) {
    throw new Error('GEMINI_API_KEY n√£o configurada. Configure a chave da API.');
  }
  
  return new GoogleGenerativeAI(apiKey);
};

export interface TextAnalysisResult {
  sentiment: 'positive' | 'neutral' | 'negative';
  sentimentScore: number; // -1 to 1
  extractedEntities: MedicalEntity[];
  keyFindings: Finding[];
  consistencyChecks: ConsistencyCheck[];
  completenessScore: number; // 0 to 100
  suggestions: Suggestion[];
  qualityMetrics: QualityMetrics;
}

export interface MedicalEntity {
  type: 'symptom' | 'medication' | 'procedure' | 'anatomy' | 'measurement' | 'timeline';
  text: string;
  confidence: number;
  context: string;
  normalizedValue?: string;
}

export interface Finding {
  category: 'improvement' | 'deterioration' | 'stability' | 'concern' | 'achievement';
  description: string;
  confidence: number;
  evidence: string[];
  recommendations?: string[];
}

export interface ConsistencyCheck {
  type: 'temporal' | 'logical' | 'clinical' | 'terminology';
  status: 'consistent' | 'inconsistent' | 'warning';
  description: string;
  conflictingElements?: string[];
  suggestions?: string[];
}

export interface Suggestion {
  type: 'content' | 'structure' | 'terminology' | 'completeness';
  priority: 'high' | 'medium' | 'low';
  description: string;
  suggestedText?: string;
  rationale: string;
}

export interface QualityMetrics {
  readability: number; // 0-100
  technicalAccuracy: number; // 0-100
  completeness: number; // 0-100
  professionalism: number; // 0-100
  overallScore: number; // 0-100
}

/**
 * Analyzes clinical text for patterns, sentiment, and quality.
 * @param text Clinical text to analyze
 * @param context Type of document and patient context
 * @returns Comprehensive text analysis results
 */
export async function analyzeClinicalText(
  text: string,
  context: {
    documentType: 'progress' | 'assessment' | 'prescription' | 'report';
    patientId?: string;
    previousTexts?: string[];
  },
  userId = 'anonymous'
): Promise<TextAnalysisResult> {
  const cacheKey = `analysis_${context.documentType}_${text.slice(0, 50)}`;
  
  try {
    const cached = aiCache.get(cacheKey, text, userId);
    if (cached) {
      console.log('üî¨ Retornando an√°lise de texto do cache (economia ~$0.05)');
      return JSON.parse(cached);
    }
  } catch (error) {
    console.warn('Cache error:', error);
  }

  console.log(`ü§ñ Analyzing clinical text (custo ~$0.05): ${context.documentType}`);
  
  try {
    const systemInstruction = `Voc√™ √© um especialista em an√°lise de textos cl√≠nicos fisioterap√™uticos.
    Analise o texto fornecido de forma abrangente, identificando:
    
    1. Sentimento geral (progresso do paciente)
    2. Entidades m√©dicas mencionadas 
    3. Achados cl√≠nicos importantes
    4. Inconsist√™ncias ou problemas
    5. Qualidade da documenta√ß√£o
    6. Sugest√µes de melhoria
    
    Forne√ßa uma an√°lise objetiva e clinicamente relevante.`;

    const analysisPrompt = `Analise este texto cl√≠nico de ${context.documentType}:

"${text}"

${context.previousTexts ? `\nTextos anteriores para compara√ß√£o:\n${context.previousTexts.join('\n---\n')}` : ''}

Retorne um JSON completo seguindo a estrutura TextAnalysisResult com:
- An√°lise de sentimento sobre a evolu√ß√£o do paciente
- Entidades m√©dicas extra√≠das (sintomas, medicamentos, procedimentos, etc.)
- Principais achados cl√≠nicos
- Verifica√ß√µes de consist√™ncia
- M√©tricas de qualidade do texto
- Sugest√µes espec√≠ficas de melhoria

Seja preciso e clinicamente relevante em todas as an√°lises.`;

    const ai = getGeminiInstance();
    const model = ai.getGenerativeModel({ 
      model: "gemini-pro",
      systemInstruction: systemInstruction
    });

    const response = await model.generateContent(analysisPrompt);
    const result = await response.response;
    const jsonText = result.text().trim();
    
    const analysisResult = JSON.parse(jsonText);
    
    // Valida e complementa o resultado se necess√°rio
    const completeResult: TextAnalysisResult = {
      sentiment: analysisResult.sentiment || 'neutral',
      sentimentScore: analysisResult.sentimentScore || 0,
      extractedEntities: analysisResult.extractedEntities || [],
      keyFindings: analysisResult.keyFindings || [],
      consistencyChecks: analysisResult.consistencyChecks || [],
      completenessScore: analysisResult.completenessScore || 50,
      suggestions: analysisResult.suggestions || [],
      qualityMetrics: analysisResult.qualityMetrics || {
        readability: 70,
        technicalAccuracy: 70,
        completeness: 50,
        professionalism: 70,
        overallScore: 65
      }
    };

    aiCache.set(cacheKey, text, JSON.stringify(completeResult));
    return completeResult;
  } catch (error) {
    console.error('Error analyzing clinical text:', error);
    throw new Error('Falha na an√°lise do texto cl√≠nico.');
  }
}

/**
 * Extracts relevant information from clinical reports and documents.
 * @param documentText Text from external reports or documents
 * @param extractionTargets Specific information to extract
 * @returns Structured extracted information
 */
export async function extractRelevantInformation(
  documentText: string,
  extractionTargets: string[],
  userId = 'anonymous'
): Promise<{
  extractedData: Record<string, any>;
  confidence: number;
  missingInformation: string[];
}> {
  const cacheKey = `extract_info_${extractionTargets.join('_')}_${documentText.slice(0, 50)}`;
  
  try {
    const cached = aiCache.get(cacheKey, documentText, userId);
    if (cached) {
      console.log('üìä Retornando extra√ß√£o de informa√ß√µes do cache (economia ~$0.04)');
      return JSON.parse(cached);
    }
  } catch (error) {
    console.warn('Cache error:', error);
  }

  console.log(`ü§ñ Extracting relevant information (custo ~$0.04)`);
  
  try {
    const systemInstruction = `Voc√™ √© um especialista em extra√ß√£o de informa√ß√µes de documentos m√©dicos.
    Extraia informa√ß√µes espec√≠ficas e relevantes do texto fornecido.
    
    Seja preciso e extraia apenas informa√ß√µes explicitamente mencionadas.
    Quando uma informa√ß√£o n√£o estiver dispon√≠vel, marque como "n√£o informado".
    Avalie sua confian√ßa na extra√ß√£o de cada informa√ß√£o.`;

    const extractionPrompt = `Extraia as seguintes informa√ß√µes do documento:

Informa√ß√µes desejadas:
${extractionTargets.map(target => `- ${target}`).join('\n')}

Documento para an√°lise:
"${documentText}"

Retorne JSON com:
{
  "extractedData": {
    "informa√ß√£o_1": "valor extra√≠do ou 'n√£o informado'",
    "informa√ß√£o_2": "valor extra√≠do ou 'n√£o informado'"
  },
  "confidence": 85,
  "missingInformation": ["informa√ß√µes que n√£o foram encontradas"],
  "extractionDetails": {
    "informa√ß√£o_1": {
      "value": "valor",
      "confidence": 90,
      "sourceText": "trecho do texto onde foi encontrado"
    }
  }
}`;

    const ai = getGeminiInstance();
    const model = ai.getGenerativeModel({ 
      model: "gemini-pro",
      systemInstruction: systemInstruction
    });

    const response = await model.generateContent(extractionPrompt);
    const result = await response.response;
    const extractionResult = JSON.parse(result.text().trim());

    aiCache.set(cacheKey, documentText, JSON.stringify(extractionResult));
    return extractionResult;
  } catch (error) {
    console.error('Error extracting relevant information:', error);
    throw new Error('Falha na extra√ß√£o de informa√ß√µes relevantes.');
  }
}

/**
 * Identifies patterns and trends across multiple patient documents.
 * @param documents Array of patient documents/texts
 * @param patientContext Patient information
 * @returns Pattern analysis results
 */
export async function identifyPatterns(
  documents: Array<{
    text: string;
    date: string;
    type: string;
  }>,
  patientContext: Patient,
  userId = 'anonymous'
): Promise<{
  trends: Trend[];
  patterns: Pattern[];
  anomalies: Anomaly[];
  insights: PatternInsight[];
}> {
  const cacheKey = `patterns_${patientContext.id}_${documents.length}`;
  
  try {
    const cached = aiCache.get(cacheKey, JSON.stringify(documents), userId);
    if (cached) {
      console.log('üìà Retornando an√°lise de padr√µes do cache (economia ~$0.06)');
      return JSON.parse(cached);
    }
  } catch (error) {
    console.warn('Cache error:', error);
  }

  console.log(`ü§ñ Identifying patterns (custo ~$0.06): ${patientContext.name}`);
  
  try {
    const systemInstruction = `Voc√™ √© um especialista em an√°lise de padr√µes cl√≠nicos longitudinais.
    Analise uma s√©rie de documentos do paciente ao longo do tempo para identificar:
    
    1. Tend√™ncias de melhora ou piora
    2. Padr√µes recorrentes de sintomas
    3. Anomalias ou eventos incomuns
    4. Insights cl√≠nicos relevantes
    
    Considere a cronologia e evolu√ß√£o temporal dos dados.`;

    const documentsData = documents
      .sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime())
      .map(doc => `[${doc.date}] ${doc.type}: ${doc.text}`)
      .join('\n\n---\n\n');

    const patternPrompt = `Analise os seguintes documentos do paciente em ordem cronol√≥gica:

Paciente: ${patientContext.name}
Hist√≥rico: ${patientContext.medicalHistory}

Documentos:
${documentsData}

Retorne JSON com:
{
  "trends": [
    {
      "type": "improvement|deterioration|stability",
      "description": "descri√ß√£o da tend√™ncia",
      "timeframe": "per√≠odo observado",
      "confidence": 85,
      "evidence": ["evid√™ncia 1", "evid√™ncia 2"]
    }
  ],
  "patterns": [
    {
      "type": "symptom|treatment|response",
      "description": "descri√ß√£o do padr√£o",
      "frequency": "frequ√™ncia de ocorr√™ncia",
      "triggers": ["gatilhos identificados"],
      "impact": "alto|m√©dio|baixo"
    }
  ],
  "anomalies": [
    {
      "description": "descri√ß√£o da anomalia",
      "date": "data aproximada",
      "severity": "alto|m√©dio|baixo",
      "possibleCauses": ["causa poss√≠vel 1", "causa poss√≠vel 2"]
    }
  ],
  "insights": [
    {
      "category": "treatment|prognosis|risk|opportunity",
      "description": "insight identificado",
      "recommendation": "recomenda√ß√£o baseada no insight",
      "priority": "alta|m√©dia|baixa"
    }
  ]
}`;

    const ai = getGeminiInstance();
    const model = ai.getGenerativeModel({ 
      model: "gemini-pro",
      systemInstruction: systemInstruction
    });

    const response = await model.generateContent(patternPrompt);
    const result = await response.response;
    const patternResult = JSON.parse(result.text().trim());

    aiCache.set(cacheKey, JSON.stringify(documents), JSON.stringify(patternResult));
    return patternResult;
  } catch (error) {
    console.error('Error identifying patterns:', error);
    throw new Error('Falha na identifica√ß√£o de padr√µes.');
  }
}

/**
 * Checks for inconsistencies in patient feedback and clinical observations.
 * @param clinicalNotes Clinical observations
 * @param patientFeedback Patient-reported information
 * @returns Inconsistency analysis
 */
export async function checkInconsistencies(
  clinicalNotes: string,
  patientFeedback: string,
  userId = 'anonymous'
): Promise<{
  inconsistencies: Inconsistency[];
  concordances: Concordance[];
  recommendations: string[];
}> {
  const cacheKey = `inconsistency_${clinicalNotes.slice(0, 30)}_${patientFeedback.slice(0, 30)}`;
  
  try {
    const cached = aiCache.get(cacheKey, clinicalNotes + patientFeedback, userId);
    if (cached) {
      console.log('‚öñÔ∏è Retornando verifica√ß√£o de inconsist√™ncias do cache (economia ~$0.03)');
      return JSON.parse(cached);
    }
  } catch (error) {
    console.warn('Cache error:', error);
  }

  console.log(`ü§ñ Checking inconsistencies (custo ~$0.03)`);
  
  try {
    const systemInstruction = `Voc√™ √© um especialista em an√°lise de concord√¢ncia entre observa√ß√µes cl√≠nicas e relatos de pacientes.
    Compare as observa√ß√µes do profissional com o feedback do paciente, identificando:
    
    1. Inconsist√™ncias importantes
    2. Concord√¢ncias que refor√ßam os achados
    3. √Åreas que necessitam esclarecimento
    
    Seja objetivo e considere que discrep√¢ncias podem ter explica√ß√µes v√°lidas.`;

    const consistencyPrompt = `Compare as seguintes informa√ß√µes:

OBSERVA√á√ïES CL√çNICAS:
"${clinicalNotes}"

FEEDBACK DO PACIENTE:
"${patientFeedback}"

Retorne JSON com:
{
  "inconsistencies": [
    {
      "area": "√°rea da inconsist√™ncia",
      "clinicalObservation": "o que o cl√≠nico observou",
      "patientReport": "o que o paciente relatou",
      "severity": "alta|m√©dia|baixa",
      "possibleExplanations": ["explica√ß√£o poss√≠vel 1", "explica√ß√£o poss√≠vel 2"],
      "requiresClarification": true
    }
  ],
  "concordances": [
    {
      "area": "√°rea de concord√¢ncia",
      "description": "descri√ß√£o da concord√¢ncia",
      "strengthens": "o que esta concord√¢ncia refor√ßa"
    }
  ],
  "recommendations": [
    "recomenda√ß√£o para esclarecer inconsist√™ncias",
    "sugest√£o de avalia√ß√£o adicional"
  ]
}`;

    const ai = getGeminiInstance();
    const model = ai.getGenerativeModel({ 
      model: "gemini-pro",
      systemInstruction: systemInstruction
    });

    const response = await model.generateContent(consistencyPrompt);
    const result = await response.response;
    const consistencyResult = JSON.parse(result.text().trim());

    aiCache.set(cacheKey, clinicalNotes + patientFeedback, JSON.stringify(consistencyResult));
    return consistencyResult;
  } catch (error) {
    console.error('Error checking inconsistencies:', error);
    throw new Error('Falha na verifica√ß√£o de inconsist√™ncias.');
  }
}

/**
 * Analyzes patient feedback sentiment and satisfaction patterns.
 * @param feedbackTexts Array of patient feedback texts
 * @returns Sentiment analysis results
 */
export async function analyzeFeedbackSentiment(
  feedbackTexts: Array<{
    text: string;
    date: string;
    context?: string;
  }>,
  userId = 'anonymous'
): Promise<{
  overallSentiment: 'positive' | 'neutral' | 'negative';
  sentimentTrend: 'improving' | 'stable' | 'declining';
  keyThemes: Theme[];
  concerns: Concern[];
  satisfactionIndicators: SatisfactionIndicator[];
}> {
  const cacheKey = `sentiment_${feedbackTexts.length}_${feedbackTexts[0]?.text.slice(0, 30)}`;
  
  try {
    const cached = aiCache.get(cacheKey, JSON.stringify(feedbackTexts), userId);
    if (cached) {
      console.log('üòä Retornando an√°lise de sentimento do cache (economia ~$0.04)');
      return JSON.parse(cached);
    }
  } catch (error) {
    console.warn('Cache error:', error);
  }

  console.log(`ü§ñ Analyzing feedback sentiment (custo ~$0.04)`);
  
  try {
    const systemInstruction = `Voc√™ √© um especialista em an√°lise de sentimento de feedback de pacientes.
    Analise os feedbacks para identificar:
    
    1. Sentimento geral e tend√™ncias
    2. Temas recorrentes (positivos e negativos)
    3. Preocupa√ß√µes espec√≠ficas
    4. Indicadores de satisfa√ß√£o
    
    Seja sens√≠vel ao contexto cl√≠nico e emocional dos pacientes.`;

    const feedbackData = feedbackTexts
      .sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime())
      .map(f => `[${f.date}] ${f.context ? `(${f.context})` : ''}: ${f.text}`)
      .join('\n\n');

    const sentimentPrompt = `Analise os seguintes feedbacks do paciente em ordem cronol√≥gica:

${feedbackData}

Retorne JSON com:
{
  "overallSentiment": "positive|neutral|negative",
  "sentimentTrend": "improving|stable|declining",
  "keyThemes": [
    {
      "theme": "tema identificado",
      "sentiment": "positive|neutral|negative",
      "frequency": 5,
      "examples": ["exemplo 1", "exemplo 2"]
    }
  ],
  "concerns": [
    {
      "concern": "preocupa√ß√£o espec√≠fica",
      "severity": "alta|m√©dia|baixa",
      "firstMentioned": "data aproximada",
      "frequency": 3,
      "suggestedAction": "a√ß√£o sugerida"
    }
  ],
  "satisfactionIndicators": [
    {
      "indicator": "indicador de satisfa√ß√£o",
      "type": "positive|negative",
      "strength": "forte|moderado|fraco",
      "relatedTo": "aspecto do tratamento relacionado"
    }
  ]
}`;

    const ai = getGeminiInstance();
    const model = ai.getGenerativeModel({ 
      model: "gemini-pro",
      systemInstruction: systemInstruction
    });

    const response = await model.generateContent(sentimentPrompt);
    const result = await response.response;
    const sentimentResult = JSON.parse(result.text().trim());

    aiCache.set(cacheKey, JSON.stringify(feedbackTexts), JSON.stringify(sentimentResult));
    return sentimentResult;
  } catch (error) {
    console.error('Error analyzing feedback sentiment:', error);
    throw new Error('Falha na an√°lise de sentimento do feedback.');
  }
}

// Interfaces para os tipos de resultado
export interface Trend {
  type: 'improvement' | 'deterioration' | 'stability';
  description: string;
  timeframe: string;
  confidence: number;
  evidence: string[];
}

export interface Pattern {
  type: 'symptom' | 'treatment' | 'response';
  description: string;
  frequency: string;
  triggers: string[];
  impact: 'high' | 'medium' | 'low';
}

export interface Anomaly {
  description: string;
  date: string;
  severity: 'high' | 'medium' | 'low';
  possibleCauses: string[];
}

export interface PatternInsight {
  category: 'treatment' | 'prognosis' | 'risk' | 'opportunity';
  description: string;
  recommendation: string;
  priority: 'high' | 'medium' | 'low';
}

export interface Inconsistency {
  area: string;
  clinicalObservation: string;
  patientReport: string;
  severity: 'high' | 'medium' | 'low';
  possibleExplanations: string[];
  requiresClarification: boolean;
}

export interface Concordance {
  area: string;
  description: string;
  strengthens: string;
}

export interface Theme {
  theme: string;
  sentiment: 'positive' | 'neutral' | 'negative';
  frequency: number;
  examples: string[];
}

export interface Concern {
  concern: string;
  severity: 'high' | 'medium' | 'low';
  firstMentioned: string;
  frequency: number;
  suggestedAction: string;
}

export interface SatisfactionIndicator {
  indicator: string;
  type: 'positive' | 'negative';
  strength: 'strong' | 'moderate' | 'weak';
  relatedTo: string;
}