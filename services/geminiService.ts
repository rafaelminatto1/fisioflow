import { GoogleGenerativeAI } from '@google/generative-ai';
import { aiCache } from './aiCache';
import type {
  Patient,
  Task,
  Assessment,
  AbandonmentRiskPrediction,
} from '../types';

// This implementation now uses the real Gemini API.
// The API key is expected to be available in the environment variables.
const ai = new GoogleGenerativeAI(process.env.GEMINI_API_KEY || '');

/**
 * Generates a summary and feedback for a physiotherapist's progress note.
 * @param progressNote The progress note written by an intern or physiotherapist.
 * @returns A string containing AI-generated feedback.
 */
export async function getTaskSummary(progressNote: string, userId = 'anonymous'): Promise<string> {
  const cacheKey = `task_summary_${progressNote.slice(0, 50)}`;
  
  // Verifica cache primeiro
  try {
    const cached = aiCache.get(cacheKey, progressNote, userId);
    if (cached) {
      console.log('üìã Retornando an√°lise do cache (economia ~$0.01)');
      return cached;
    }
  } catch (error) {
    console.warn('Cache error:', error);
  }

  console.log('ü§ñ Calling Gemini API with note (custo ~$0.01)');

  try {
    const systemInstruction =
      'Voc√™ √© um fisioterapeuta s√™nior e mentor. Sua tarefa √© analisar a anota√ß√£o de progresso de um estagi√°rio de fisioterapia. Forne√ßa um feedback construtivo, em portugu√™s, destacando pontos positivos, √°reas para melhoria e sugest√µes pr√°ticas para aprimorar o tratamento e o registro cl√≠nico. A resposta deve ser em formato de bullet points concisos e claros.';

    const model = ai.getGenerativeModel({ 
      model: "gemini-pro",
      systemInstruction: systemInstruction
    });

    const response = await model.generateContent(`Analisar a seguinte anota√ß√£o de progresso: "${progressNote}"`);
    const result = await response.response;
    const text = result.text();
    if (!text) {
      console.warn('Gemini API returned an empty response.');
      return 'A IA retornou uma resposta vazia. Tente reformular sua anota√ß√£o.';
    }

    // Armazena no cache para economizar nas pr√≥ximas calls
    aiCache.set(cacheKey, progressNote, text);
    return text;
  } catch (error) {
    console.error('Error calling Gemini API:', error);

    if (error instanceof Error) {
      if (error.message.includes('API key')) {
        return 'Erro: A chave da API n√£o foi configurada corretamente. Verifique as vari√°veis de ambiente.';
      }
      if (error.message.includes('fetch')) {
        return 'Erro de rede: N√£o foi poss√≠vel conectar √† API. Verifique sua conex√£o com a internet.';
      }
    }
    return 'N√£o foi poss√≠vel obter a an√°lise da IA neste momento. Ocorreu um erro inesperado. Tente novamente mais tarde.';
  }
}

/**
 * Searches for an answer to a query within a provided knowledge base using the Gemini API.
 * @param query The user's question.
 * @param knowledgeBase A string containing all the content from the notebooks.
 * @returns A string with the AI-generated answer.
 */
export async function searchKnowledgeBase(
  query: string,
  knowledgeBase: string,
  userId = 'anonymous'
): Promise<string> {
  const cacheKey = `knowledge_${query.slice(0, 50)}`;
  
  // Verifica cache primeiro
  try {
    const cached = aiCache.get(cacheKey, query, userId);
    if (cached) {
      console.log('üîç Retornando busca do cache (economia ~$0.02)');
      return cached;
    }
  } catch (error) {
    console.warn('Cache error:', error);
  }

  console.log('ü§ñ Searching knowledge base (custo ~$0.02)', query);
  try {
    const systemInstruction = `Voc√™ √© um assistente especialista em fisioterapia para a cl√≠nica FisioFlow. Sua tarefa √© responder perguntas baseando-se **estritamente** no conte√∫do da base de conhecimento fornecida. N√£o invente informa√ß√µes. Se a resposta n√£o estiver na base de conhecimento, diga claramente: "A informa√ß√£o n√£o foi encontrada na base de conhecimento." Formate a resposta de forma clara e use markdown se apropriado.`;

    const content = `Base de Conhecimento:\n---\n${knowledgeBase}\n---\n\nPergunta do Usu√°rio: "${query}"`;

    const model = ai.getGenerativeModel({ 
      model: "gemini-pro",
      systemInstruction: systemInstruction
    });

    const response = await model.generateContent(content);
    const result = await response.response;
    const text = result.text();
    if (!text) {
      console.warn(
        'Gemini API returned an empty response for knowledge base search.'
      );
      return 'A IA n√£o conseguiu processar a busca. Tente novamente.';
    }

    // Armazena no cache
    aiCache.set(cacheKey, query, text);
    return text;
  } catch (error) {
    console.error('Error calling Gemini API for knowledge base search:', error);

    if (error instanceof Error) {
      if (error.message.includes('API key')) {
        return 'Erro: A chave da API n√£o foi configurada corretamente.';
      }
      if (error.message.includes('fetch')) {
        return 'Erro de rede: N√£o foi poss√≠vel conectar √† API. Verifique sua conex√£o.';
      }
    }
    return 'N√£o foi poss√≠vel realizar a busca neste momento. Ocorreu um erro inesperado.';
  }
}

/**
 * Generates a progress report for a patient based on their clinical history and tasks.
 * @param patient The patient object.
 * @param tasks A list of tasks associated with the patient.
 * @returns A string containing the AI-generated report in Markdown format.
 */
export async function generatePatientReport(
  patient: Patient,
  tasks: Task[],
  userId = 'anonymous'
): Promise<string> {
  const cacheKey = `report_${patient.id}_${tasks.length}_${patient.medicalHistory?.slice(0, 30)}`;
  
  // Verifica cache primeiro
  try {
    const cached = aiCache.get(cacheKey, patient.medicalHistory || '', userId);
    if (cached) {
      console.log('üìÑ Retornando relat√≥rio do cache (economia ~$0.03)');
      return cached;
    }
  } catch (error) {
    console.warn('Cache error:', error);
  }

  console.log(`ü§ñ Generating report (custo ~$0.03): ${patient.name}`);
  try {
    const systemInstruction = `Voc√™ √© um fisioterapeuta experiente e est√° redigindo um relat√≥rio de progresso para um paciente. Com base no hist√≥rico cl√≠nico e na lista de tarefas (plano de tratamento), gere um relat√≥rio conciso e profissional. O relat√≥rio deve ser estruturado com:
1.  **Sum√°rio do Paciente:** Breve descri√ß√£o baseada no hist√≥rico cl√≠nico.
2.  **Plano de Tratamento e Execu√ß√£o:** Resumo das principais tarefas realizadas e seu status.
3.  **An√°lise de Progresso:** Uma avalia√ß√£o geral da evolu√ß√£o do paciente com base nas tarefas.
4.  **Recomenda√ß√µes:** Sugest√µes para os pr√≥ximos passos.

A resposta deve ser em formato Markdown, pronta para ser copiada. Use um tom formal e cl√≠nico.`;

    const taskHistory = tasks
      .map(
        (t) =>
          `- T√≠tulo: ${t.title}\n  Status: ${TASK_STATUSES[t.status]}\n  Descri√ß√£o/Nota: ${t.description || 'N/A'}`
      )
      .join('\n');
    const content = `**Hist√≥rico Cl√≠nico do Paciente:**\n${patient.medicalHistory}\n\n**Tarefas e Evolu√ß√£o:**\n${taskHistory || 'Nenhuma tarefa registrada.'}`;

    const model = ai.getGenerativeModel({ 
      model: "gemini-pro",
      systemInstruction: systemInstruction
    });

    const response = await model.generateContent(content);
    const result = await response.response;
    const text = result.text();
    if (!text) {
      console.warn('Gemini API returned an empty response for patient report.');
      return 'A IA n√£o conseguiu gerar o relat√≥rio. Tente novamente.';
    }

    // Armazena no cache
    aiCache.set(cacheKey, patient.medicalHistory || '', text);
    return text;
  } catch (error) {
    console.error('Error calling Gemini API for patient report:', error);

    if (error instanceof Error) {
      if (error.message.includes('API key')) {
        return 'Erro: A chave da API n√£o foi configurada corretamente.';
      }
      if (error.message.includes('fetch')) {
        return 'Erro de rede: N√£o foi poss√≠vel conectar √† API. Verifique sua conex√£o.';
      }
    }
    return 'N√£o foi poss√≠vel gerar o relat√≥rio neste momento. Ocorreu um erro inesperado.';
  }
}

/**
 * Generates a structured treatment plan based on patient assessment data.
 * @param assessment The assessment object containing patient data.
 * @returns A string with the AI-generated treatment plan in Markdown format.
 */
export async function generateTreatmentPlan(
  assessment: Partial<Assessment>,
  userId = 'anonymous'
): Promise<string> {
  const cacheKey = `treatment_${assessment.id}_${assessment.mainComplaint?.slice(0, 30)}`;
  const inputData = `${assessment.mainComplaint} ${assessment.history} ${assessment.diagnosticHypothesis}`;
  
  // Verifica cache primeiro
  try {
    const cached = aiCache.get(cacheKey, inputData, userId);
    if (cached) {
      console.log('ü©∫ Retornando plano do cache (economia ~$0.02)');
      return cached;
    }
  } catch (error) {
    console.warn('Cache error:', error);
  }

  console.log(`ü§ñ Generating treatment plan (custo ~$0.02):`, assessment.id);
  try {
    const systemInstruction = `Voc√™ √© um fisioterapeuta s√™nior especialista em reabilita√ß√£o. Sua tarefa √© criar um plano de tratamento estruturado com base nas informa√ß√µes da avalia√ß√£o do paciente. O plano deve ser conciso e pr√°tico. Organize a resposta em:
1.  **Objetivos de Curto Prazo:** (Ex: Redu√ß√£o da dor, melhora da ADM).
2.  **Objetivos de Longo Prazo:** (Ex: Retorno √†s atividades di√°rias sem dor, fortalecimento muscular).
3.  **Condutas Sugeridas:** (Ex: Cinesioterapia, terapia manual, eletroterapia, educa√ß√£o do paciente).

A resposta deve ser em formato Markdown e em portugu√™s.`;

    const content = `**Dados da Avalia√ß√£o:**
- **Queixa Principal:** ${assessment.mainComplaint || 'N√£o informada.'}
- **Hist√≥rico:** ${assessment.history || 'N√£o informado.'}
- **Hip√≥tese Diagn√≥stica:** ${assessment.diagnosticHypothesis || 'N√£o informada.'}

Com base nesses dados, gere o plano de tratamento.`;

    const model = ai.getGenerativeModel({ 
      model: "gemini-pro",
      systemInstruction: systemInstruction
    });

    const response = await model.generateContent(content);
    const result = await response.response;
    const text = result.text();
    if (!text) {
      console.warn('Gemini API returned an empty response for treatment plan.');
      return 'A IA n√£o conseguiu gerar o plano de tratamento. Tente novamente.';
    }

    // Armazena no cache
    aiCache.set(cacheKey, inputData, text);
    return text;
  } catch (error) {
    console.error('Error calling Gemini API for treatment plan:', error);
    if (error instanceof Error) {
      if (error.message.includes('API key')) {
        return 'Erro: A chave da API n√£o foi configurada corretamente.';
      }
      if (error.message.includes('fetch')) {
        return 'Erro de rede: N√£o foi poss√≠vel conectar √† API.';
      }
    }
    return 'N√£o foi poss√≠vel gerar o plano de tratamento neste momento. Ocorreu um erro inesperado.';
  }
}

/**
 * Analyzes anonymized patient data to predict abandonment risk.
 * @param anonymizedPatientData An array of patient metrics.
 * @returns A promise that resolves to an array of risk predictions.
 */
export async function predictAbandonmentRisk(
  anonymizedPatientData: any[]
): Promise<AbandonmentRiskPrediction[]> {
  try {
    const systemInstruction =
      "Voc√™ √© um analista de dados para uma cl√≠nica de fisioterapia. Analise a lista de m√©tricas de pacientes anonimizados para identificar indiv√≠duos com alto risco de abandonar o tratamento. Retorne um array JSON de objetos, cada um com 'patientId', 'riskLevel' ('Alto', 'M√©dio', 'Baixo') e um 'reason' conciso. Foque em padr√µes como longos intervalos entre consultas, baixa ades√£o a exerc√≠cios e pagamentos pendentes.";
    // Schema removed due to API compatibility issues

    const model = ai.getGenerativeModel({ 
      model: "gemini-pro",
      systemInstruction: systemInstruction
    });

    const response = await model.generateContent(`Analise os seguintes dados de pacientes:\n${JSON.stringify(anonymizedPatientData, null, 2)}`);
    const result = await response.response;
    const jsonText = result.text().trim();
    return JSON.parse(jsonText);
  } catch (error) {
    console.error('Error in predictAbandonmentRisk:', error);
    throw new Error('Falha ao analisar o risco de abandono.');
  }
}

/**
 * Generates a structured SOAP note from unstructured text.
 * @param notes Unstructured notes from a session.
 * @returns A promise that resolves to a structured SOAP note object.
 */
export async function generateSOAPNote(notes: string): Promise<{
  subjective: string;
  objective: string;
  assessment: string;
  plan: string;
}> {
  try {
    const systemInstruction =
      'Voc√™ √© um escriba m√©dico especializado em fisioterapia. Converta as seguintes anota√ß√µes de consulta n√£o estruturadas em uma nota SOAP estruturada (Subjetivo, Objetivo, Avalia√ß√£o, Plano). Garanta que a sa√≠da seja um objeto JSON. Seja conciso e use linguagem cl√≠nica.';
    // Schema removed due to API compatibility issues

    const model = ai.getGenerativeModel({ 
      model: "gemini-pro",
      systemInstruction: systemInstruction
    });

    const response = await model.generateContent(`Converta estas anota√ß√µes: "${notes}"`);
    const result = await response.response;
    const jsonText = result.text().trim();
    return JSON.parse(jsonText);
  } catch (error) {
    console.error('Error in generateSOAPNote:', error);
    throw new Error('Falha ao gerar nota SOAP.');
  }
}

const TASK_STATUSES = {
  todo: 'A Fazer',
  in_progress: 'Em Progresso',
  review: 'Revis√£o',
  done: 'Conclu√≠do',
};
