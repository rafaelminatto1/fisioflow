name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # Job 1: Testes e Qualidade de Código
  test:
    name: 🧪 Tests & Code Quality
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🟢 Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: 📦 Install dependencies
      run: npm ci
    
    # - name: 🔍 Run ESLint
    #   run: npm run lint
    
    # - name: 💅 Check Prettier formatting
    #   run: npm run format:check
    
    - name: 🔧 TypeScript type check
      run: npm run type-check
    
    - name: 🧪 Run tests
      run: npm run test:coverage
    
    - name: 📊 Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # Job 2: Build
  build:
    name: 🏗️ Build Application
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: 📦 Install dependencies
      run: npm ci
    
    - name: 🏗️ Build application
      run: npm run build
    
    - name: 📤 Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: dist/
        retention-days: 7

  # Job 3: Security Scan
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: 📦 Install dependencies
      run: npm ci
    
    - name: 🔍 Run npm audit
      run: npm audit --audit-level=high
      continue-on-error: true
    
    - name: 🛡️ Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high
      continue-on-error: true

  # Job 4: Deploy to Staging (apenas na branch main)
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, build, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: staging
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 📤 Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-files
        path: dist/
    
    - name: 🚀 Deploy to Vercel (Staging)
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: ./
        scope: ${{ secrets.VERCEL_ORG_ID }}

  # Job 5: Deploy to Production (apenas com tags)
  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, build, security]
    if: startsWith(github.ref, 'refs/tags/v')
    environment: production
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 📤 Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-files
        path: dist/
    
    - name: 🌟 Deploy to Vercel (Production)
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        vercel-args: '--prod'
        working-directory: ./
        scope: ${{ secrets.VERCEL_ORG_ID }}
    
    - name: 📋 Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: FisioFlow ${{ github.ref }}
        body: |
          🎉 Nova versão do FisioFlow!
          
          ## 📋 Changelog
          Veja o [CHANGELOG.md](https://github.com/rafaelminatto1/fisioflow/blob/main/CHANGELOG.md) para detalhes.
          
          ## 🚀 Deploy
          - ✅ Testes automatizados passaram
          - ✅ Build realizado com sucesso
          - ✅ Deploy em produção concluído
        draft: false
        prerelease: false